schemaVersion: 2.0.0

metadataTest:
  envVars:
    - key: 'DEBIAN_FRONTEND'
      value: 'noninteractive'
    - key: 'LANG'
      value: 'C.UTF-8'
    - key: 'PYENV_SHELL'
      value: '/bin/bash'
    - key: 'PYTHONUNBUFFERED'
      value: '1'
  user: 'app'
  workdir: '/app'
  exposedPorts: ['9000']
  entrypoint:
    - '/bin/bash'
    - './docker-entrypoint.sh'

fileExistenceTests:
  - name: "Check /app directory exists and is owned by app"
    path: "/app"
    shouldExist: true
    uid: 1000
    gid: 1000

  - name: "Check /home/app directory exists"
    path: "/home/app"
    shouldExist: true
    uid: 1000
    gid: 1000

commandTests:
  - name: "Verify Python binary"
    command: "python"
    args: ["--version"]
    expectedOutput: ["Python 3.12"]

  - name: "Check pip version"
    command: "pip"
    args: ["--version"]
    expectedOutput: ["pip"]

  - name: "Check git installed"
    command: "git"
    args: ["--version"]
    expectedOutput: ["git version"]

  - name: "Check screen installed"
    command: "screen"
    args: ["--version"]
    expectedOutput: ["Screen version"]

  - name: "Check vim installed"
    command: "vim"
    args: ["--version"]
    exitCode: 0
    expectedOutput: ["VIM"]

  - name: "Check wget installed"
    command: "wget"
    args: ["--version"]
    expectedOutput: ["GNU Wget"]

  - name: "Check pipenv installed"
    command: "pipenv"
    args: ["--version"]
    expectedOutput: ["pipenv, version"]

  - name: "Check torch installed"
    command: "pipenv"
    args: ["run", "python", "-c", "import torch; print(torch.__version__)"]
    expectedOutput: ["2.5.1"]

  - name: "Check current user is app"
    command: "whoami"
    expectedOutput: ["app"]

  - name: "Check current working directory is /app"
    command: "pwd"
    expectedOutput: ["/app"]
